==================[Syllabus Start]==================
CM146: Introduction to Machine Learning (Winter
2019)
Instructor: 
Sriram Sankararaman
 (http://web.cs.ucla.edu/~sriram)
Lecture: Monday / Wednesday 2:00pm - 3:50pm, Boelter Hall 3400
Discussions: Friday 2:00-3:50pm Boelter 5422 (1A), 12:00-1:50pm Boelter 5264 (1B), 10:00-11:50am Boelter 5264
(1C), 2:00-3:50 pm Boelter 5273 (1D)
Course description
Machine Learning encompasses the study of algorithms that learn from data. It has been a key component in a number of problem
domains including computer vision, natural language processing, computational biology and robotics. This class will introduce the
fundamental concepts and algorithms in machine learning (supervised as well as unsupervised learning) as well as best practices in
applying machine learning to practical problems. The class consists of lectures, problem sets that contain mathematical and programming
exercises and two in-class exams.
Prerequisites
Undergraduate level training or coursework in algorithms, linear algebra, calculus and multivariate calculus, basic probability and
statistics; an undergraduate level course in Artificial Intelligence may be helpful but is not required. A background in programming will also
be necessary for the problem sets; specifically students are expected to be familiar with python and scikit-learn (a machine learning
package for python) or learn it during the course.
Contact Info
Instructor: 
Sriram Sankararaman
 (http://web.cs.ucla.edu/~sriram)
Office Hours: Engineering VI 296B, Tuesday 1:00-2:00pm 
Email: sriram at cs dot ucla dot edu
Teaching assistants
Sajad Darabi
Office hours: Engineering VI in front of room 372, Thursdays 8:00-10:00am 
Email: sajad10 at ucla dot edu
Nolan Donoghue
Office hours: Engineering VI 294, Thursdays 10:30 am-12:30 pm 
Email: nolan at cs dot ucla dot edu
Zeyu Li
Office hours: Boelter 3551, Monday 9:00-11:00am 
Email: zyli at cs dot ucla dot edu
Ariel Wu
Office hours: Engineering VI 294, Tuesday 1:30pm-3:30pm
Email: arielwu at cs dot ucla dot edu
Textbooks
While there is not one textbook that covers all the material from this course, readings will come from the following texts:
A course in machine learning: 
(http://ciml.info/index_0_9.html)
 by Hal Daume III, which will be referred to as 
CIML
 
(freely available
online
 (http://ciml.info/index_0_9.html)
) is the primary reference. We will use version 0.9 of CIML.
Patter recognition and machine learning 
(https://www.springer.com/us/book/9780387310732)
 by Christopher M. Bishop , 
referred to
as 
PRML
For a more advanced treatment, the following are useful:
Machine Learning: A Probabilistic Perspective
 (https://mitpress.mit.edu/books/machine-learning-1)
 by Kevin Murphy.
Elements of Statistical Learning 
(http://statweb.stanford.edu/~tibs/ElemStatLearn/)
 
by Trevor Hastie, Robert 
Tibshirani and Jerome
Friedman 
(freely available 
online
 (http://statweb.stanford.edu/~tibs/ElemStatLearn/)
)
Machine Learning requires a strong mathematical foundation. You may find the following resources useful to brush up your math
background.
Probability
Review notes
 (http://cs229.stanford.edu/section/cs229-prob.pdf)
 from Stanford's machine learning course
Linear algebra
Review notes
 (http://cs229.stanford.edu/section/cs229-linalg.pdf)
 from Stanford's machine learning course
Optimization
Review notes
 (http://cs229.stanford.edu/section/cs229-cvxopt.pdf)
 from Stanford's machine learning course
Review notes
 (http://cs229.stanford.edu/section/cs229-cvxopt2.pdf)
 from Stanford's machine learning course
Course format
Problem sets (50%)
: There will be periodic problem sets (aka homeworks). Questions on the problem sets will include math
exercises, programming exercises and data analyses.
We will use 
gradescope
 (https://www.gradescope.com)
 to manage submission of problem sets.
Problem sets are due at 11:59 pm on the due date.
Late submissions will not be accepted
All solutions must be clearly written (or typed) ; unreadable answers will not be graded. We encourage using LaTeX to type
out answers.
Solutions will be graded on both correctness and clarity. If you cannot solve a problem completely, you will get more partial
credit by identifying the gaps in your argument than by attempting to cover them up.
You are free to discuss the problems from the problem sets. However, you must write up your own solutions. You must also
acknowledge all collaborators.
Mini quiz on math background (0%)
: This is a in class, closed-book and closed-notes mini quiz that will help you evaluate your
background. This quiz does not count towards your final grade but is required for the course.
Exams (Mid-term: 20%, Final: 30%)
: 
There are two exams scheduled for Feb 11 and March 19. Exams are in class, closed-book
and closed-notes and will cover material from the lectures and the problem sets. 
No alternate or make-up exams will be
administered, except for disability/medical reasons documented and communicated to the instructor prior to the exam date. In
particular, exam dates and times cannot be changed to accommodate scheduling conflicts with other classes.
Problem set 0 and the math mini-quiz will be graded but not count towards your final grades. However, you need to submit both. We
will not grade any other problem sets/exams unless you attempt problem set 0 and math mini quiz.
Software
We will extensively be using 
Python
 (https://www.python.org/)
 2.7.x to implement ML algorithms and run experiments. You will require and
need to familiarize yourself with the following packages:
numpy
 (http://www.numpy.org/)
: contains tools for numerical linear algebra, random number generation. For a numpy tutorial, see
here 
(https://docs.scipy.org/doc/numpy-dev/user/quickstart.html)
.
scipy
 (http://www.scipy.org/)
scikit-learn
 (http://www.scikit-learn.org/)
 : contains tools for machine learning and data science. For a tutorial, see 
here 
(http://scikit-
learn.org/stable/tutorial/index.html)
Forums
Piazza
We will use Piazza for class discussions. Please go to 
this 
Piazza website
 (piazza.com/ucla/winter2019/csm146)
 to join the course forum
(note: you must use a 
ucla.edu email account to join the forum). We strongly encourage 
students to post on this forum rather than
emailing the course staff 
directly (this will be more efficient for both students and staff). 
Students should use Piazza to:
Ask clarifying questions about the course material.
Share useful resources with classmates (so long as they do not 
contain solutions).
Look for project partners or other students to form study groups.
Answer questions posted by other students to solidify your own 
understanding of the material.
The course Academic Integrity Policy must be followed on the message 
boards at all times. Do not post or request solutions to problem
sets! Also, 
please be polite.
Gradescope
We will use gradescope to manage and grade problem sets and exams.
Please see 
this guide
 (http://gradescope-static-assets.s3-us-west-2.amazonaws.com/help/submitting_hw_guide.pdf)
Policies
Academic Integrity Policy
Group studying and collaborating on problem sets are encouraged, as 
working together is a great way to understand new material.
Students 
are free to discuss the homework problems with anyone under the 
following conditions:
Students must write their own solutions and understand the 
solutions that they wrote down.
Students must list the names of their collaborators (i.e., anyone 
with whom the assignment was discussed).
Students may not use old solution sets from this class or any 
other class under any circumstances, unless the instructor grants
special permission.
Students are 
encouraged to read the Dean of Students' 
guide
(http://www.deanofstudents.ucla.edu/Portals/16/Documents/StudentGuide.pdf)
 to Academic Integrity.
Attendance and class participation
Although not a formal component of the course grade, attendance is essential for success in this course. If you are absent without a
documented excuse, the instructor and TAs will not be able to go over missed lecture material with you. We emphatically welcome
questions and your active participation in this course will enhance your learning experience and that of the other students.
Regrade requests
Regrade requests for homework and exams must be made through gradescope within one week after the graded homeworks have been
released, regardless of your attendance on that day and regardless of any intervening holidays such as Memorial Day. We reserve the
right to regrade all problems for a given regrade request.
Acknowledgments
The course website is based on material developed by 
Ameet Talwalkar
 (http://web.cs.ucla.edu/~ameet/)
 and 
Fei Sha
(http://web.cs.ucla.edu/~feisha/)
. 
Some of the administrative content on the course website is adapted 
from material from 
Jenn 
Wortman
Vaughan
 (http://www.jennwv.com/)
, 
Rich Korf
 (http://web.cs.ucla.edu/~korf/)
, and 
Alexander Sherstov
 (http://web.cs.ucla.edu/~sherstov/)
.
Tentative Schedule (subject to change)
Date
Topics
Readings
Problem Sets
1/07
Introduction
 (../slides/week1-lecture1.pdf)
Problem Set 0
1/11
Probability and statistics
PRML 1.2-1.2.2
1/14
Math review mini quiz. Decision Trees
CIML 1.3-1.10
1/16
Nearest neighbors
CIML 2-2.3, 2.5-2.6
1/21
No class
1/23
Linear classification (perceptron)
CIML 3
1/28
Logistic regression
CIML 6.3
1/30
Linear regression
CIML 6-6.2, 6.4-6.6
2/04
Overfitting and regularization
2/06
Kernels
CIML 9-9.2, 9.4-9.6
2/11
In-class mid-term
2/13
Kernels
CIML 
9-9.2, 9.4-9.6
2/18
No class.
2/20
SVMs
CIML 6.7
2/25
Kernelized SVMs
2/27
Evaluating ML methods,Ensemble methods
CIML 11-11.2
3/04
Dimensionality reduction
3/06
Mixture models
3/11
HMMs
3/12
Neural networks

===================[Syllabus End]===================
Please examine the attached course syllabus carefully and provide detailed answers to the research questions (RQ) listed below. Each question focuses on specific aspects of "computing systems" tailored for AI/ML scalability. We are looking for specific issues and topics related to compilers, runtime systems, hardware acceleration, code optimization, programming model for AI/ML covered in the syllabus. Programming with Python or jupyter does not count as computing system topics.

RQ 1. Course Content and Frequency:
1.1 How frequently are topics explicitly related to "computing system" specialized for ML/AI discussed in the course? 
The topics are 1) scalable (parallel and distributed) model training, inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer in likert scale: 
Frequent (4): At least one dedicated lecture discussed the topics.
Intermittent (3): The topics are discussed occasionally. 
Infrequent (2): The topics are rarely mentioned.
Never mentioned (1): The topics are never mentioned.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 2. Definition and Understanding:
2.1 How are the impacts of "computing systems" on AI/ML explicitly defined and explained in undergraduate curricula? 
The definition and explanation should include concepts of 1) scalable (parallel and distributed) model training, inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer in Likert scale: 
Adequate (3): Provide detailed definition and explanation.
Inadequate (2): Many of the topics missed significant discussion in lectures or in assignments.
Undefined (1): The topics are mostly undefined.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
2.2 Do courses provide a comprehensive and explicit definition of impacts of "computing systems" on AI/ML?
The definition and explanation should include concepts such as 1) scalable (parallel and distributed) model training, inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer by providing the list of above topics (1 to 9) discussed in the course. Make it short and direct. Limit in 100 words. Do not include topics unrelated to "computing systems" like general ML/AI algorithms.

RQ 3. Requirement Specification:
3.1 How are computational performance and capability requirements for hardware and software systems running scalable AI/ML, explicitly specified and discussed in undergraduate courses?
Topics include 1) Computational Power (CPU, GPU, TPU, Edge AI chips), Memory and Storage, Network for scalable (parallel and distributed) model training, inference; 2) Distributed Computing Frameworks such as TensorFlow's Distributed Strategy, PyTorch's Distributed Data Parallel (DDP), and Horovod 3)  Optimization Techniques such as Efficient Algorithm, Quantization, Prunning 4) Programming Models and Abstractions such as High-Level Libraries (Tensorflow, PyTorch, Keras)
Answer in Likert scale: 
Quantitatively (3): The lectures or assignments provide numerical values for computational performance and capability requirements such as latency, throughput, resource utilization etc.
Qualitatively (2): The lectures used descriptive terms.
No guidelines (1): The Lecture provide no guidelines.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
3.2 How did the discussion of “computing system” requirements rank against the discussion of general AI/ML topics?
Answer in Likert scale: 
Equally discussed with other AI/ML topics (3)
“computing system” requirements is a sub topic (2) 
“computing system” requirements were never discussed (1) 
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 4. Influence and Importance:
4.1 How is the importance of various “computing system” factors of designing and maintaining scalable AI/ML emphasized in the course?
The factors are 1) scalable (parallel and distributed) model training and inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer in Likert scale: 
Holistic (2): The course took into account of many of the above factors.
System (1): The course viewed the factors as low level system issue, relegating responsibility to correct choice of hardware, programming model and AI/ML framework.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.

RQ 5. Case Studies and Real-World Applications:
5.1 Are real-world case studies involving hardware and software systems for AI/ML, with a focus on scalable model training, inference, and serving explicitly included in the curriculum?
Answer in Likert scale: 
Major (2): Computational performance and capability of the underlying system was the major concerns of the case studies.
Minor (1): Computational performance and capability of the underlying system was not a major concern of the case studies.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 6. Awareness and Integration of AI-Specific Engineering Practices:
6.1 Do the courses discuss contributions and best practices from AI/ML system engineering communities, specifically in areas such as compilers, runtime systems, hardware acceleration, and code optimization?
Answer in Likert scale: 
Adequate (3): The courses thoroughly cover contributions from AI/ML system engineering communities and best practices in detail by depicting from state of art.
Inadequate (2): The courses mention the topic but do not cover it in sufficient depth or detail.
Undefined (1): The coverage of this topic in the courses is unclear or not well-defined.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 7. Projects and Practical Implementation:
7.1 To what extent do the assignments in the course provide hands-on experience with designing, building, and maintaining both scalable hardware and software systems for AI/ML, specifically focusing on compiler optimization, optimizing runtime systems, hardware acceleration, or code optimization for AI/ML?
Answer in Likert scale: 
Adequate (3): The assignments thoroughly cover these areas and provide extensive hands-on experience.
Inadequate (2): The assignments cover these areas minimally and do not provide sufficient hands-on experience.
None (1): The assignments do not cover these areas or provide relevant hands-on experience.
Could not be evaluated (0): Insufficient information or exposure to the assignments on the syllabus to provide an evaluation.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
