==================[Syllabus Start]==================
 University of Illinois at Chicago 
Spring 201 7 
CS 411 — Artificial Intelligence  I 
Course Syllabus 
 
 
 
Room:  BH317 
Time: MWF 9 :00 – 9:50 
URL: via Blackboard /  Piazza  
 
Staff  
Instructor: Xinhua Z hang  
Office: 1237 SEO  
Phone:  312.413 .2416  
E-mail:  zhangx@uic.edu (preferred)  
Office  Hours:  10-11 MW  
 
 
 
Teaching Assistant:  ??? 
TA’s email:  ???@uic.edu 
TA’s Office Hrs:  ?-? ?? (SEO ??) 
 
Office hours start from week 2 (Jan 1 6). 
 
 
Course  Objectives  
 
The aim of this course is to introduce students to the field of Artificial Intelligence (AI). Specifically,  the 
course  will provide  the theoretical  foundations  that underlie  AI, and practice in building  components  of 
rational  agents.  
 
Textbooks  (Required)  
 
Stuart  J. Russell  and Peter  Norvig.  Artificial  Intelligence — A Modern Approach.  Third  Edition . Prentice  
Hall, 2010.  URL: http://aima.cs.berkeley.edu/    
 
Prerequisites  
 
CS 251 
 Notes  
 
• I use email  and Blackboard a lot to communicate  with the whole  class.  Please check  your email 
frequently, especially around deadlines (homework and  exams).  
• The web page on Blackboard will contain all materials relev ant to the class, syllabus,  assignments,  
lecture notes etc. You can also see you own  grades.  
 
Tentative Schedule  
The week numbers refer to the teaching time, hence from 1 -15.  The s pring break is excluded.  
 
Date  Topic  Readings  
Week  1 Introduction, Intelligent  Agents  Ch. 1-2 
(Jan 1 6) Martin Luther King, Jr., Day. No classes  
Week  2-3 Problem Solving:  Search  Ch. 3-4 
Week 4-5 Problem Solving: Game Playing, Constraint Satisfaction  Ch. 5-6 
Week 6-7 Logic  and inference  Ch. 7-9 
Week  8 Machine Learning  Ch. 18 
Week 9  Quantifying Uncertainty  Ch. 1 3 
Week  10-13 Probabilistic Reasoning  Ch. 14-17 
Week 14  Learning Probabilistic Models  Ch. 20  
Week  15 Natural Language Processing , Catch up, etc  ... Ch. 22-23 
 
Some  session s are for recitation , depending on the progress . 
 
Midterm  and final e xams  
 
Date  Event  
Friday of Week 6  (Feb 1 7) Midterm  1 (Ch. 1 -6) 
Friday of Week 11 (Mar 31) Midterm  2 (Ch. 7, 8, 9, 13, 18) 
Final week  (Week 16)  Final exam  
 
 
Assignment 1: out: Sat of Week 3, due: Mon of Week 6  (Feb 1 3) 
Assignment 2: out: Sat of Week 8, due: Mon  of Week 11 (March 2 7).  Three weeks due to spring break. 
Assignment 3: out: Sat of Week 1 2, due: Sun  of Week 1 4 (April 2 3, for return on Friday of the next week )
 Grading  Criteria  
 
There are six (6) assessment components, each is worth 100 points (excluding bonus points), and contribut es to 
your final score  with a weight (percentage).  
 
• 3 Assignments (10% each ): Each assignment  will contribute 10% to your final score . 
Assignments will be a mix of pen-and-pencil  and programming/implementation.   
For some  assignments , we will use the code  repository  available on the book  web site 
http://aima.cs.berkeley.edu/code.html.   
Homework  will have to be submitted  via Blackboard.  
• 3 Exams: 2 midterms ( 20% each), 1 final  (30%). 
1. The two midterms  will be given  during  class time; consequently,  no make -ups will be given.  
2. Exams will be  closed -book.  
3. The final is cumulative, with more emphasis on the last part of the class.  
 
Suppose your scores of first and second mid- term exams are x 1 and x2 respectively.  Your final exam score is x 3.  
Your three assignments are y 1, y2, y3.  Then your final score is  
 
S = 0.2*x 1 + 0.2*x 2 + 0.3*x 3 + 0.1*(y 1+y2+y3). 
 
Assignments and exams have bonus points .  As a result , each x i and y i may exceed 100 and so the final 
score S  may exceed 100.  
 
 
Conversion from final score to letter grade 
 
The final conversion from score S to A/B/C/D/F is as follows:  
 
A: 80 and above  
B: 70 ~ 79 
C: 60 ~ 69 
D: 50 ~ 59 F: 0 ~ 49  
 
If your letter grade is D or F, I reserve the right to upgrade it to C or D.  
 
Important  Note:  To pass the class  you must  get at least 50% of the total available  points  for the three  
exams.  That is:  
𝟓𝟓𝟓𝟓≤𝟓𝟓.𝟐𝟐∗𝐱𝐱𝟏𝟏 + 𝟓𝟓.𝟐𝟐∗𝐱𝐱𝟐𝟐 + 𝟓𝟓.𝟑𝟑∗𝐱𝐱𝟑𝟑
𝟓𝟓.𝟐𝟐+𝟓𝟓.𝟐𝟐+𝟓𝟓.𝟑𝟑 
 That is, bonus points (making x
i above 100) are truly bonus, without being capped or scaled back to 100.  
 General Policies on homework and exams  
 
1. Late homework  will not be accepted  in any case,  unless  there  is a documented personal  emergency.  
Arrangements must  be made  with the instructor  as soon as possible  after the emergency  arises,  prefer - 
ably before the homework due  date.  
 
Advice: If for whatever reason you don’t manage to finish an assignment, hand in wha t you  have.  
Partial  credit  may be given  at the grader’s  discretion.  
2. Statute  of Limitations: Three  weeks!  No grading questions  or complaints  — no matter  how justified  
— will be listened  to three  weeks after the item in question  has been  returned.  
 Policy on Academic  Integrity  
 
Academic dishonesty will not be tolerated. Please see the CS department policy below on the topic;  this 
policy  specifies penalties  for violations.  
What is academic dishonesty? To hand in any work which is not 100% the student’s creation, unless  you 
are explicitly allowed to do so. Thus:  
 
1. Exams. All work on all exams must be individually  performed. 
2. Homework : no student may give any other student any portion of their solutions or code,  through  
any means. Students  are not allowed to help each other debug the code, or to show each other  any 
portions of code or  homework. 
 
Important  Note:  almost  every semester  somebody  is caught  red-handed and as a consequence fails the 
class. Isn’t it better to get a B or a C than an   F? 
 
CS department policy on academic  dishonesty  
 
The CS Department  will not tolerate  cheating  by its students. The  MINIMUM  penalty  for any student  found  
cheating  will be to receive an F for the course and to have the event  recorded  in a department  and/or  College  
record. The maximum penalty will be expulsion from the  University. 
Cheating  includes  all the following,  though this is not a complete  list: 
 
• Copying  or any other  form  of getting  or giving assistance from  another  student  during  any test, quiz,  
exam, midterm,  etc. 
• Plagiarism –turning in writing that is copied from some other  source.  
• Obtaining  solutions  to homework by posting  to the Internet  for assistance,  purchasing  assistance,  
obtaining  copies  of solutions  manuals  for instructors,  and obtaining  copies of previous  year’s  
homework  solutions.  
• Computer programs: Any time you look at another student’s code, it is cheating. (Exception: If  you 
are EXPLICITLY told that you may do so by the  instructor.)  
 
For computer programs, if for some reason we cannot determine who copied from whom, we may, at our 
discretion, give failing grades to both students.  
 
It is the responsibility of all engineering and computer science professionals to safeguard their  company’ s 
“trade secrets.” An employee who allows trade secrets to be obtained by competitors will almost  certainly  
be fired. So, YOU are responsible for making sure that your directories have permissions set so that  only 
you can read your files,  for being  sure to log out at the end of working  in the computer  lab, etc. 

===================[Syllabus End]===================
Please examine the attached course syllabus carefully and provide detailed answers to the research questions (RQ) listed below. Each question focuses on specific aspects of "computing systems" tailored for AI/ML scalability. We are looking for specific issues and topics related to compilers, runtime systems, hardware acceleration, code optimization, programming model for AI/ML covered in the syllabus. Programming with Python or jupyter does not count as computing system topics.

RQ 1. Course Content and Frequency:
1.1 How frequently are topics explicitly related to "computing system" specialized for ML/AI discussed in the course? 
The topics are 1) scalable (parallel and distributed) model training, inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer in likert scale: 
Frequent (4): At least one dedicated lecture discussed the topics.
Intermittent (3): The topics are discussed occasionally. 
Infrequent (2): The topics are rarely mentioned.
Never mentioned (1): The topics are never mentioned.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 2. Definition and Understanding:
2.1 How are the impacts of "computing systems" on AI/ML explicitly defined and explained in undergraduate curricula? 
The definition and explanation should include concepts of 1) scalable (parallel and distributed) model training, inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer in Likert scale: 
Adequate (3): Provide detailed definition and explanation.
Inadequate (2): Many of the topics missed significant discussion in lectures or in assignments.
Undefined (1): The topics are mostly undefined.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
2.2 Do courses provide a comprehensive and explicit definition of impacts of "computing systems" on AI/ML?
The definition and explanation should include concepts such as 1) scalable (parallel and distributed) model training, inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer by providing the list of above topics (1 to 9) discussed in the course. Make it short and direct. Limit in 100 words. Do not include topics unrelated to "computing systems" like general ML/AI algorithms.

RQ 3. Requirement Specification:
3.1 How are computational performance and capability requirements for hardware and software systems running scalable AI/ML, explicitly specified and discussed in undergraduate courses?
Topics include 1) Computational Power (CPU, GPU, TPU, Edge AI chips), Memory and Storage, Network for scalable (parallel and distributed) model training, inference; 2) Distributed Computing Frameworks such as TensorFlow's Distributed Strategy, PyTorch's Distributed Data Parallel (DDP), and Horovod 3)  Optimization Techniques such as Efficient Algorithm, Quantization, Prunning 4) Programming Models and Abstractions such as High-Level Libraries (Tensorflow, PyTorch, Keras)
Answer in Likert scale: 
Quantitatively (3): The lectures or assignments provide numerical values for computational performance and capability requirements such as latency, throughput, resource utilization etc.
Qualitatively (2): The lectures used descriptive terms.
No guidelines (1): The Lecture provide no guidelines.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
3.2 How did the discussion of “computing system” requirements rank against the discussion of general AI/ML topics?
Answer in Likert scale: 
Equally discussed with other AI/ML topics (3)
“computing system” requirements is a sub topic (2) 
“computing system” requirements were never discussed (1) 
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 4. Influence and Importance:
4.1 How is the importance of various “computing system” factors of designing and maintaining scalable AI/ML emphasized in the course?
The factors are 1) scalable (parallel and distributed) model training and inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer in Likert scale: 
Holistic (2): The course took into account of many of the above factors.
System (1): The course viewed the factors as low level system issue, relegating responsibility to correct choice of hardware, programming model and AI/ML framework.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.

RQ 5. Case Studies and Real-World Applications:
5.1 Are real-world case studies involving hardware and software systems for AI/ML, with a focus on scalable model training, inference, and serving explicitly included in the curriculum?
Answer in Likert scale: 
Major (2): Computational performance and capability of the underlying system was the major concerns of the case studies.
Minor (1): Computational performance and capability of the underlying system was not a major concern of the case studies.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 6. Awareness and Integration of AI-Specific Engineering Practices:
6.1 Do the courses discuss contributions and best practices from AI/ML system engineering communities, specifically in areas such as compilers, runtime systems, hardware acceleration, and code optimization?
Answer in Likert scale: 
Adequate (3): The courses thoroughly cover contributions from AI/ML system engineering communities and best practices in detail by depicting from state of art.
Inadequate (2): The courses mention the topic but do not cover it in sufficient depth or detail.
Undefined (1): The coverage of this topic in the courses is unclear or not well-defined.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 7. Projects and Practical Implementation:
7.1 To what extent do the assignments in the course provide hands-on experience with designing, building, and maintaining both scalable hardware and software systems for AI/ML, specifically focusing on compiler optimization, optimizing runtime systems, hardware acceleration, or code optimization for AI/ML?
Answer in Likert scale: 
Adequate (3): The assignments thoroughly cover these areas and provide extensive hands-on experience.
Inadequate (2): The assignments cover these areas minimally and do not provide sufficient hands-on experience.
None (1): The assignments do not cover these areas or provide relevant hands-on experience.
Could not be evaluated (0): Insufficient information or exposure to the assignments on the syllabus to provide an evaluation.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
