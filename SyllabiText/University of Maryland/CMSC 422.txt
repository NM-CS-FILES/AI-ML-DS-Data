==================[Syllabus Start]==================
CMSC 422 - Introduction to Machine Learning
Syllabus
Instructor
Mohammad Nayeem Teli, nayeem@umd.edu, Section 0101.
OÔ¨Éce: IRB 1128, OÔ¨Éce phone: 301-405-0405.
Welcome
Welcome to CMSC 422. Machine Learning studies representations and algorithms that allow machines to
improve their performance on a task from experience. This is a broad overview of existing methods for
machine learning and an introduction to adaptive systems in general. Emphasis is given to practical aspects
of machine learning and data mining.
Textbook
Our primary source of readings will be A Course in Machine Learning, a collection of notes by Hal Daum√©
III, which provides a gentle and thorough introduction to the Ô¨Åeld of machine learning.
Topics
This course provides a broad introduction to machine learning and statistical inference. We will attempt
to cover the following topics:
Supervised Learning
‚ÄìDecision trees and inductive bias
‚ÄìGeometry and nearest neighbors
‚ÄìPerceptron
‚ÄìBeyond binary classiÔ¨Åcation
‚ÄìLinear models and gradient descent
‚ÄìSupport Vector Machines
‚ÄìNaive Bayes models and probabilistic modeling
‚ÄìNeural networks
‚ÄìKernels
‚ÄìEnsemble Learning
Unsupervised Learning
‚ÄìClustering
‚ÄìExpectation-Maximization (EM)
‚ÄìPrincipal Component Analysis (PCA)
1
Advanced Topics (if time permits)
‚ÄìRobustness against Adversarial Examples
‚ÄìFairness
‚ÄìInterpretability of Models
Note that this is a tentative list and we may add or remove some topics as it Ô¨Åts.
Prerequisites
Minimum grade of C- in CMSC320, CMSC330, and CMSC351; and 1 course with a minimum grade of C-
from (MATH240, MATH461); and permission of CMNS-Computer Science department.
CMSC 422 is a mathematical course. Linear algebra and probability background are required. You
must be able to take derivatives by hand (preferably of multivariate functions). You must know what the
chain rule of probability is, and Bayes‚Äô rule. More background is not necessary but is helpful: for instance,
dot products and their relationship to projections onto subspaces, and what a Gaussian is. We provide
some reading material to help you refresh your memory, but if you haven‚Äôt at least seen these things before,
you will need to invest a signiÔ¨Åcant amount of time to catch up on math background.
We will make extensive use of the Python programming language. It is assumed that you know or will
quickly learn how the program in Python. You should understand basic computer science concepts (like
recursion), basic data structures (trees, graphs), and basic algorithms (search, sorting, etc.).
Course Discussions
Ask and answer questions, participate in discussions and surveys, contact the instructors, and everything
else on Piazza.
Course Requirements and grading
Assignments
‚ÄìAssignments will provide you an opportunity to think about the material presented in lectures.
You are allowed and encouraged to work in groups but you must prepare and submit your
solutions independently.
‚ÄìAssignments should be submitted through Canvas. Late assignments are not allowed.
Exams
‚ÄìWe will have one midterm and one Ô¨Ånal exam. Exams will cover material in the previous lectures
and will be open notes (but closed book). All notes must be on one sheet of paper (double sided),
either printed or handwritten.
Final Project
‚ÄìWe will have a Ô¨Ånal project for this course. The project will be done in groups (three to Ô¨Åve
students per group) focusing on deeper understanding an advanced machine learning problem.
We will have Ô¨Ånal project presentations and report. For excellent projects, I keep the right to
increase the project weight for some groups.
Grading
‚ÄìHomework and Programming Assignments 30%
2
‚ÄìMidterm exam 25%
‚ÄìFinal exam 35%
‚ÄìProject 10%
Online Posting of Homework Solutions Not Allowed
Do not post your homework solutions online (e.g., GitHub, PasteBin) where they can be seen by
others. Making your solutions accessible to others can lead to academic integrity violations.
Even if the course is over, do not make your homework solutions available to others.
Notice we constantly monitor online sources.
Academic Honesty
Note that academic dishonesty includes not only cheating, fabrication, and plagiarism, but also in-
cludes helping other students commit acts of academic dishonesty by allowing them to obtain copies
of your work. You are allowed to use the Web for reference purposes, but you may not copy straight
from any website or any other source. In short, all submitted work must be your own.
Cases of academic dishonesty will be pursued to the fullest extent possible as stipulated by the OÔ¨Éce
of Student Conduct. Without exception every case of suspected academic dishonesty will be referred
to the OÔ¨Éce. If the student is found to be responsible of academic dishonesty, the typical sanction
results in a special grade ‚ÄúXF", indicating that the course was failed due to academic dishonesty. More
serious instances can result in expulsion from the university. If you have any doubt as to whether an
act of yours might constitute academic dishonesty, please contact your TA or the course coordinator.
The University of Maryland, College Park has a nationally recognized Code of Academic Integrity,
administered by the Student Honor Council. This code sets standards for academic integrity at
Marylandforallundergraduateandgraduatestudents. Asastudentyouareresponsibleforupholding
thesestandardsforthiscourse. Itisveryimportantforyoutobeawareoftheconsequencesofcheating,
fabrication, facilitation, and plagiarism. For more information on the Code of Academic Integrity or
the Student Honor Council, please visit https://www.studentconduct.umd.edu/.
Examples of Academic Integrity Violations
The following are examples of academic integrity violations:
‚ÄìHardcoding of results in a project assignment. Hardcoding refers to attempting to make a
solution appear as if it works correctly (e.g., printing expected results).
‚ÄìUsing any material available on the internet/web or any other source.
‚ÄìHiring any online service to complete an assignment for you.
‚Äì You may not post the implementation of your assignments, materials related to the
class (e.g., project description), or any other material associated with this course.
Even if the class is over and you have graduated, you may NOT post any material.
‚ÄìSharing your homework solutions with any student.
‚ÄìProviding ideas/suggestions on how to solve/implement an assignment.
‚ÄìUsing online forums to ask for help regarding our assignments.
3
Class Announcements
You are responsible for reading the class announcements that are posted on this webpage. Please
check them often (at least once a day). Important information about the course (e.g., deadlines,
assignment updates, etc.) will be posted in this section.
Excused Absence and Academic Accommodations
1. Any student who needs to be excused for an absence from a single class session , due to a
medically necessitated absence shall:
‚Äì Make a reasonable attempt to inform the instructor of his/her illness prior to
the class . If you are going to miss an in-class assignment then we expect to hear from you
(either email or telephone message) before the class session begins.
‚ÄìUpon returning to the class, present their instructor with a self-signed note attesting to the
date of their illness. The note must contain an acknowledgment by the student that the
information provided is true and correct. Providing false information to University oÔ¨Écials
is prohibited under Part 9(h) of the Code of Student Conduct (V-1.00(B) University of
Maryland Code of Student Conduct) and may result in disciplinary action.
‚Äì This self-documentation may not be used for the Major Scheduled Grading
Events as deÔ¨Åned below and it may only be used for one class meeting during
the semester.
2. Any student who needs to be excused for more than one absence, or for a ‚ÄúMajor Scheduled
Grading Event", must provide written documentation of the illness from the Health Center or
from an outside health care provider. This documentation must verify dates of treatment and
indicate the timeframe that the student was unable to meet academic responsibilities. The
documentation should be given to the instructor, not the TA. We will not accept a ‚Äúself-
signed" note for ‚Äúmajor scheduled grading events", as deÔ¨Åned below. The note must
be signed by a health care professional.
The Major Scheduled Grading Events for this course include:
‚ÄìMidterm
‚ÄìFinal Exam
‚ÄìHomeworks / Aassignments
It is also the student‚Äôs responsibility to inform the instructor of any intended absences from exams for
religious observances in advance . Notice should be provided as soon as possible but no later than one
week prior to the exam.
Accessibility and Disability Support
Anystudenteligibleforandrequestingreasonableacademicaccommodationsduetoadisabilityisrequested
to provide, to the instructor in oÔ¨Éce hours, a letter of accommodation from the OÔ¨Éce of Disability Support
Services (DSS) within the Ô¨Årst two weeks of the semester.
Course Evaluations
The Department of Computer Science takes the student course evaluations very seriously. Evaluations will
usually be open during the last few weeks of the course. Students can go to https://courseevalum.umd.edu/
to complete their evaluations.
4
Copyright
All course materials are copyright UMCP, Department of Computer Science c2022. All rights reserved.
Students are permitted to use course materials for their own personal use only. Course materials may not
be distributed publicly or provided to others (excepting other students in the course), in any way or format.
5

===================[Syllabus End]===================
Please examine the attached course syllabus carefully and provide detailed answers to the research questions (RQ) listed below. Each question focuses on specific aspects of "computing systems" tailored for AI/ML scalability. We are looking for specific issues and topics related to compilers, runtime systems, hardware acceleration, code optimization, programming model for AI/ML covered in the syllabus. Programming with Python or jupyter does not count as computing system topics.

RQ 1. Course Content and Frequency:
1.1 How frequently are topics explicitly related to "computing system" specialized for ML/AI discussed in the course? 
The topics are 1) scalable (parallel and distributed) model training, inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer in likert scale: 
Frequent (4): At least one dedicated lecture discussed the topics.
Intermittent (3): The topics are discussed occasionally. 
Infrequent (2): The topics are rarely mentioned.
Never mentioned (1): The topics are never mentioned.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 2. Definition and Understanding:
2.1 How are the impacts of "computing systems" on AI/ML explicitly defined and explained in undergraduate curricula? 
The definition and explanation should include concepts of 1) scalable (parallel and distributed) model training, inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer in Likert scale: 
Adequate (3): Provide detailed definition and explanation.
Inadequate (2): Many of the topics missed significant discussion in lectures or in assignments.
Undefined (1): The topics are mostly undefined.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
2.2 Do courses provide a comprehensive and explicit definition of impacts of "computing systems" on AI/ML?
The definition and explanation should include concepts such as 1) scalable (parallel and distributed) model training, inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer by providing the list of above topics (1 to 9) discussed in the course. Make it short and direct. Limit in 100 words. Do not include topics unrelated to "computing systems" like general ML/AI algorithms.

RQ 3. Requirement Specification:
3.1 How are computational performance and capability requirements for hardware and software systems running scalable AI/ML, explicitly specified and discussed in undergraduate courses?
Topics include 1) Computational Power (CPU, GPU, TPU, Edge AI chips), Memory and Storage, Network for scalable (parallel and distributed) model training, inference; 2) Distributed Computing Frameworks such as TensorFlow's Distributed Strategy, PyTorch's Distributed Data Parallel (DDP), and Horovod 3)  Optimization Techniques such as Efficient Algorithm, Quantization, Prunning 4) Programming Models and Abstractions such as High-Level Libraries (Tensorflow, PyTorch, Keras)
Answer in Likert scale: 
Quantitatively (3): The lectures or assignments provide numerical values for computational performance and capability requirements such as latency, throughput, resource utilization etc.
Qualitatively (2): The lectures used descriptive terms.
No guidelines (1): The Lecture provide no guidelines.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
3.2 How did the discussion of ‚Äúcomputing system‚Äù requirements rank against the discussion of general AI/ML topics?
Answer in Likert scale: 
Equally discussed with other AI/ML topics (3)
‚Äúcomputing system‚Äù requirements is a sub topic (2) 
‚Äúcomputing system‚Äù requirements were never discussed (1) 
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 4. Influence and Importance:
4.1 How is the importance of various ‚Äúcomputing system‚Äù factors of designing and maintaining scalable AI/ML emphasized in the course?
The factors are 1) scalable (parallel and distributed) model training and inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer in Likert scale: 
Holistic (2): The course took into account of many of the above factors.
System (1): The course viewed the factors as low level system issue, relegating responsibility to correct choice of hardware, programming model and AI/ML framework.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.

RQ 5. Case Studies and Real-World Applications:
5.1 Are real-world case studies involving hardware and software systems for AI/ML, with a focus on scalable model training, inference, and serving explicitly included in the curriculum?
Answer in Likert scale: 
Major (2): Computational performance and capability of the underlying system was the major concerns of the case studies.
Minor (1): Computational performance and capability of the underlying system was not a major concern of the case studies.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 6. Awareness and Integration of AI-Specific Engineering Practices:
6.1 Do the courses discuss contributions and best practices from AI/ML system engineering communities, specifically in areas such as compilers, runtime systems, hardware acceleration, and code optimization?
Answer in Likert scale: 
Adequate (3): The courses thoroughly cover contributions from AI/ML system engineering communities and best practices in detail by depicting from state of art.
Inadequate (2): The courses mention the topic but do not cover it in sufficient depth or detail.
Undefined (1): The coverage of this topic in the courses is unclear or not well-defined.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 7. Projects and Practical Implementation:
7.1 To what extent do the assignments in the course provide hands-on experience with designing, building, and maintaining both scalable hardware and software systems for AI/ML, specifically focusing on compiler optimization, optimizing runtime systems, hardware acceleration, or code optimization for AI/ML?
Answer in Likert scale: 
Adequate (3): The assignments thoroughly cover these areas and provide extensive hands-on experience.
Inadequate (2): The assignments cover these areas minimally and do not provide sufficient hands-on experience.
None (1): The assignments do not cover these areas or provide relevant hands-on experience.
Could not be evaluated (0): Insufficient information or exposure to the assignments on the syllabus to provide an evaluation.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
