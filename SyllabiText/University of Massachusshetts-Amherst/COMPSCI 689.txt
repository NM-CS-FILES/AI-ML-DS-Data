==================[Syllabus Start]==================
University of Massachusetts Amherst
Search UMass
 
Benjamin Marlin
Benjamin Marlin
 (https://groups.cs.umass.edu/marlin)
 (https://groups.cs.umass.edu/marlin)
Associate Professor

 
marlin@cs.umass.edu
marlin@cs.umass.edu
 (mailto:marlin@cs.umass.edu)
 (mailto:marlin@cs.umass.edu)

 
Phone: (413) 545-4493

 
A355 LGRC

 
Offered: 2023
Course Description:
 Machine learning is the computational study of artificial systems that can adapt to
novel situations, discover patterns from data, and improve performance with practice. This course will cover
the mathematical foundation of supervised and unsupervised learning. The course will provide a state-of-
the-art overview of the field, with an emphasis on implementing and deriving learning algorithms for a
variety of models from first principles. 3 credits.
Detailed course topics:
 Overview of supervised and unsupervised learning; mathematical foundations of
numerical optimization and statistical estimation; maximum likelihood and maximum a posteriori (MAP)
estimation; missing data and expectation maximization (EM); graphical models including mixture models;
logistic regression and generalized linear models; nonparametric models including kernel-based methods;
and dimensionality reduction methods. The course will focus on deriving learning algorithms from first
principles and implementing them from scratch.
Time:
 TuTh 10:00AM – 11:15AM
Location: 
TBA
Website:
 The course website will be hosted on Canvas.
Textbook:
 The course will use 
Machine Learning: A Probabilistic Perspective
 by Kevin Murphy as the course
text. This text is available to UMass students for free through the UMass library.
Computing: 
Access to a relatively modern computer will be required to complete the assignment for the
course. The course will use Python as a programming language.
Required Background:
 This course requires a 
strong mathematical background
 in probability and
statistics, multivariate calculus and linear algebra. See below for recommended preparation over the
summer.
COMPSCI 689: Machine Learning – Fall 2023
COMPSCI 689: Machine Learning – Fall 2023
What is the difference between COMPSCI 689 and COMPSCI 589?:
 589 was designed to focus on
understanding and applying core machine learning models and algorithms. 689 focuses on the
mathematical foundations of machine learning with a focus on deriving and implementing machine learning
algorithms for novel models from scratch. The course is primarily intended for students interested in
pursuing research on machine learning models and algorithms. It focuses on the math-to-code-to-
experiments-to-results pipeline needed to take machine learning research ideas from conception to
publication. While both 589 and 689 require a background in multivariate calculus, linear algebra, and
probability; 689 will use more of this background material than 589.
Who Should Take COMPSCI 689?: 
689 is primarily intended as an AI area core course for doctoral stream
students. Undergraduate students should take COMPSCI 589 before applying for an override for COMPSCI
689 without exception. Professional MS students and other graduate students from outside computer
science should also take COMPSCI 589 before attempting COMPSCI 689 unless they have a prior
undergraduate background in machine learning or an extremely strong background in mathematics,
statistics, and programming (for example, an undergraduate degree in mathematical computing).
What Should I do to Prepare to Take 689?
1
. 
Make sure 689 is the right course for you and this is the right time to take it.
 See the suggestions above about 589 vs 689.
2
. 
Set-up your schedule to accommodate the course. 
All students are strongly advised against taking 689 in combination
with any other 
PhD-level core course
PhD-level core course
 (https://www.cics.umass.edu/grads/core-requirements-phd)
 (https://www.cics.umass.edu/grads/core-requirements-phd)
 unless they have
extremely strong backgrounds in all areas. You can make-up gaps in background at the same time you learn primary course
material, but you will need to be prepared to devote extra time to the course to do so.
3
. 
Start addressing gaps or weaknesses in you background now.
 689 starts with the assumption that you have sufficient
background knowledge of linear algebra, vector calculus, multi-variate probability, and Python, and will integrate aspects of
these topics together from the outset (e.g., using differential calculus to derive a method for optimizing the parameters of a
multi-variate probability density over a vector space and then implementing the method in Python). The course does not
cover background topics, but to help you prepare we have assembled a reading list that covers what you need to know to
get started in the course. Reviewing all of the material below with a focus on weaker areas is a good strategy for all
students. The specific sources below may cover material at a deeper level than is included in some undergrad CS programs
(for example, computational complexity of linear algebra operations), so all students may want to at least skim this material.
Suggested Reading List:
Covering the math in the order listed below is likely to be most helpful.For calculus, Corral or Marsden and
Tromba can be used. Marsden and Tromba is more detailed, but Corral will do. All texts are open access or
freely available through the UMass Library (links provided), except for Marsden and Tromba. The course’s
Piazza site will open at the beginning of the summer to facilitate discussion of background material among
students.
Stephen Boyd. 
Introduction to Applied Linear Algebra
Introduction to Applied Linear Algebra
 (https://web.stanford.edu/~boyd/vmls/vmls.pdf)
 (https://web.stanford.edu/~boyd/vmls/vmls.pdf)
. 
. 
(https://web.stanford.edu/~boyd/vmls/vmls.pdf)
(https://web.stanford.edu/~boyd/vmls/vmls.pdf)
Chapter 1: Vectors
Chapter 2.1: Linear Functions
Chapter 3: Norm and Distance
Home
Home
 (https://groups.cs.umass.edu/marlin/)
 (https://groups.cs.umass.edu/marlin/)
JS User Agent Test
JS User Agent Test
 (https://groups.cs.umass.edu/marlin/js-user-agent-test/)
 (https://groups.cs.umass.edu/marlin/js-user-agent-test/)
OCAM Study
OCAM Study
Resources
Resources
 (https://groups.cs.umass.edu/marlin/ocam/)
 (https://groups.cs.umass.edu/marlin/ocam/)
Publications
Publications
 (https://groups.cs.umass.edu/marlin/publications/)
 (https://groups.cs.umass.edu/marlin/publications/)
Students
Students
(https://groups.cs.umass.edu/marlin/students/)
(https://groups.cs.umass.edu/marlin/students/)
Teaching
Teaching
 (https://groups.cs.umass.edu/marlin/teaching/)
 (https://groups.cs.umass.edu/marlin/teaching/)
Training and Outreach
Training and Outreach
(https://groups.cs.umass.edu/marlin/outreach/)
(https://groups.cs.umass.edu/marlin/outreach/)
Chapter 5: Linear Independence
Chapter 6: Matrices
Chapter 8: Linear Equations (Can skip 8.2)
Chapter 10: Matrix Multiplication
Chapter 11: Matrix Inverses
Stephen Boyd and Lieven Vandenberghe. 
Convex Optimization
Convex Optimization
(https://web.stanford.edu/~boyd/cvxbook/bv_cvxbook.pdf)
(https://web.stanford.edu/~boyd/cvxbook/bv_cvxbook.pdf)
. (Covers additional linear algebra background missing from the
Applied text)
Appendix A.1, A.3, A.4, A.5
Appendix C.1, C.2, C.3, C.4
Michael Corral. 
Vector Calculus
Vector Calculus
 (http://www.mecmath.net/VectorCalculus.pdf)
 (http://www.mecmath.net/VectorCalculus.pdf)
Chapter 1: Vectors in Euclidean Space (1.1 to 1.6, 1.8)
Chapter 2: Functions of Several Variables (2.1 to 2.5)
Chapter 3: Double Integrals (3.1, 3.3, 3.4, 3.7)
Marsden and Tromba. Vector Calculus
Chapter 1: Geometry of Euclidean Space (1.1, 1.2, 1.3, 1.5)
Chapter 2: Differentiation (2.1, 2.2, 2.3, 2.5, 2.6)
Chapter 3: Higher Order Derivatives (3.1, 3.3)
Chapter 4: Vector Valued Functions (4.1)
Chapter 5: Double and Triple Integrals (5.1, 5.2, 5.5)
Bishop. 
Pattern Recognition and Machine Learning
Pattern Recognition and Machine Learning
 (https://www.microsoft.com/en-
 (https://www.microsoft.com/en-
us/research/uploads/prod/2006/01/Bishop-Pattern-Recognition-and-Machine-Learning-2006.pdf)
us/research/uploads/prod/2006/01/Bishop-Pattern-Recognition-and-Machine-Learning-2006.pdf)
 (probability from an ML
perspective)
Chapter 1: Introduction (1.2)
Chapter 2: Probability Distributions (2.1, 2.2, 2.3, 2.4)
Murphy. 
Machine Learning: A Probabilistic Perspective
Machine Learning: A Probabilistic Perspective
 (https://ebookcentral.proquest.com/lib/UMA/detail.action?
 (https://ebookcentral.proquest.com/lib/UMA/detail.action?
docID=3339490)
docID=3339490)
 (more probability from an ML perspective)
Chapter 2: Probability
Python background (NumPy, SciPy, PyTorch)
Scipy Lecture Notes
: Getting started with Python for science
: Getting started with Python for science
 (https://scipy-lectures.org/intro/index.html)
 (https://scipy-lectures.org/intro/index.html)
 (can skip
1.5.8-1.5.10)
Scipy Lecture Notes
: Optimizing Code
: Optimizing Code
 (https://scipy-lectures.org/advanced/optimizing/index.html)
 (https://scipy-lectures.org/advanced/optimizing/index.html)
Scipy Lecture Notes
: Scikit-learn: machine learning in Python
: Scikit-learn: machine learning in Python
 (https://scipy-lectures.org/packages/scikit-
 (https://scipy-lectures.org/packages/scikit-
learn/index.html)
learn/index.html)
 (will use for some baseline methods, helpful to know APIs)
PyTorch Tutorials
PyTorch Tutorials
 (https://pytorch.org/tutorials/)
 (https://pytorch.org/tutorials/)
PyTorch Documentation
PyTorch Documentation
 (https://pytorch.org/docs/stable/index.html)
 (https://pytorch.org/docs/stable/index.html)
(https://groups.cs.umass.edu/marlin/2022/03/28/compsci-689-machine-learning-fall-2022/)
(https://groups.cs.umass.edu/marlin/2022/03/28/compsci-689-machine-learning-fall-2022/)




===================[Syllabus End]===================
Please examine the attached course syllabus carefully and provide detailed answers to the research questions (RQ) listed below. Each question focuses on specific aspects of "computing systems" tailored for AI/ML scalability. We are looking for specific issues and topics related to compilers, runtime systems, hardware acceleration, code optimization, programming model for AI/ML covered in the syllabus. Programming with Python or jupyter does not count as computing system topics.

RQ 1. Course Content and Frequency:
1.1 How frequently are topics explicitly related to "computing system" specialized for ML/AI discussed in the course? 
The topics are 1) scalable (parallel and distributed) model training, inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer in likert scale: 
Frequent (4): At least one dedicated lecture discussed the topics.
Intermittent (3): The topics are discussed occasionally. 
Infrequent (2): The topics are rarely mentioned.
Never mentioned (1): The topics are never mentioned.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 2. Definition and Understanding:
2.1 How are the impacts of "computing systems" on AI/ML explicitly defined and explained in undergraduate curricula? 
The definition and explanation should include concepts of 1) scalable (parallel and distributed) model training, inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer in Likert scale: 
Adequate (3): Provide detailed definition and explanation.
Inadequate (2): Many of the topics missed significant discussion in lectures or in assignments.
Undefined (1): The topics are mostly undefined.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
2.2 Do courses provide a comprehensive and explicit definition of impacts of "computing systems" on AI/ML?
The definition and explanation should include concepts such as 1) scalable (parallel and distributed) model training, inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer by providing the list of above topics (1 to 9) discussed in the course. Make it short and direct. Limit in 100 words. Do not include topics unrelated to "computing systems" like general ML/AI algorithms.

RQ 3. Requirement Specification:
3.1 How are computational performance and capability requirements for hardware and software systems running scalable AI/ML, explicitly specified and discussed in undergraduate courses?
Topics include 1) Computational Power (CPU, GPU, TPU, Edge AI chips), Memory and Storage, Network for scalable (parallel and distributed) model training, inference; 2) Distributed Computing Frameworks such as TensorFlow's Distributed Strategy, PyTorch's Distributed Data Parallel (DDP), and Horovod 3)  Optimization Techniques such as Efficient Algorithm, Quantization, Prunning 4) Programming Models and Abstractions such as High-Level Libraries (Tensorflow, PyTorch, Keras)
Answer in Likert scale: 
Quantitatively (3): The lectures or assignments provide numerical values for computational performance and capability requirements such as latency, throughput, resource utilization etc.
Qualitatively (2): The lectures used descriptive terms.
No guidelines (1): The Lecture provide no guidelines.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
3.2 How did the discussion of “computing system” requirements rank against the discussion of general AI/ML topics?
Answer in Likert scale: 
Equally discussed with other AI/ML topics (3)
“computing system” requirements is a sub topic (2) 
“computing system” requirements were never discussed (1) 
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 4. Influence and Importance:
4.1 How is the importance of various “computing system” factors of designing and maintaining scalable AI/ML emphasized in the course?
The factors are 1) scalable (parallel and distributed) model training and inference; 2) testing, debugging, and monitoring of ML applications; 3) ML programming models and abstractions; 4) programming languages for machine learning; 5) ML compilers and runtimes; 6) specialized hardware for machine learning; 7) hardware-efficient ML methods; 8) machine learning benchmarks, and tooling.
Answer in Likert scale: 
Holistic (2): The course took into account of many of the above factors.
System (1): The course viewed the factors as low level system issue, relegating responsibility to correct choice of hardware, programming model and AI/ML framework.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.

RQ 5. Case Studies and Real-World Applications:
5.1 Are real-world case studies involving hardware and software systems for AI/ML, with a focus on scalable model training, inference, and serving explicitly included in the curriculum?
Answer in Likert scale: 
Major (2): Computational performance and capability of the underlying system was the major concerns of the case studies.
Minor (1): Computational performance and capability of the underlying system was not a major concern of the case studies.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 6. Awareness and Integration of AI-Specific Engineering Practices:
6.1 Do the courses discuss contributions and best practices from AI/ML system engineering communities, specifically in areas such as compilers, runtime systems, hardware acceleration, and code optimization?
Answer in Likert scale: 
Adequate (3): The courses thoroughly cover contributions from AI/ML system engineering communities and best practices in detail by depicting from state of art.
Inadequate (2): The courses mention the topic but do not cover it in sufficient depth or detail.
Undefined (1): The coverage of this topic in the courses is unclear or not well-defined.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
RQ 7. Projects and Practical Implementation:
7.1 To what extent do the assignments in the course provide hands-on experience with designing, building, and maintaining both scalable hardware and software systems for AI/ML, specifically focusing on compiler optimization, optimizing runtime systems, hardware acceleration, or code optimization for AI/ML?
Answer in Likert scale: 
Adequate (3): The assignments thoroughly cover these areas and provide extensive hands-on experience.
Inadequate (2): The assignments cover these areas minimally and do not provide sufficient hands-on experience.
None (1): The assignments do not cover these areas or provide relevant hands-on experience.
Could not be evaluated (0): Insufficient information or exposure to the assignments on the syllabus to provide an evaluation.
Provide the score based on overall discussion of the above topics. Do not rate each topic individually. No explanation needed.
